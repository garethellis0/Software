#!/usr/bin/env python
from dynamic_reconfigure.parameter_generator_catkin import *
gen = ParameterGenerator()
ai_example_play = gen.const("ai_example_play", str_t, "Example Play", "")
ai_stop_play = gen.const("ai_stop_play", str_t, "Stop Play", "")
ai_halt_play = gen.const("ai_halt_play", str_t, "Halt Play", "")
ai_corner_kick_play = gen.const("ai_corner_kick_play", str_t, "Corner Kick Play", "")
ai_free_kick_play = gen.const("ai_free_kick_play", str_t, "Free Kick Play", "")
ai_defense_play = gen.const("ai_defense_play", str_t, "Defense Play", "")
ai_kickoffenemy_play = gen.const("ai_kickoffenemy_play", str_t, "KickoffEnemy Play", "")
ai_kickofffriendly_play = gen.const("ai_kickofffriendly_play", str_t, "KickoffFriendly Play", "")
ai_enemy_freekick_play = gen.const("ai_enemy_freekick_play", str_t, "Enemy Freekick Play", "")
ai_penalty_kick_play = gen.const("ai_penalty_kick_play", str_t, "Penalty Kick Play", "")
ai_penalty_kick_enemy_play = gen.const("ai_penalty_kick_enemy_play", str_t, "Penalty Kick Enemy Play", "")
ai_shootorchip_play = gen.const("ai_shootorchip_play", str_t, "ShootOrChip Play", "")
ai_current_ai_play_enum = gen.enum([ai_example_play, 
ai_stop_play, 
ai_halt_play, 
ai_corner_kick_play, 
ai_free_kick_play, 
ai_defense_play, 
ai_kickoffenemy_play, 
ai_kickofffriendly_play, 
ai_enemy_freekick_play, 
ai_penalty_kick_play, 
ai_penalty_kick_enemy_play, 
ai_shootorchip_play], "Selector for current_ai_play")
AI = gen.add_group("AI")
AI.add("vision_flipping_filter_enabled", bool_t, 0, "Ignores frames if our goalie appears in the opponent defense area", True, None, None, edit_method="")
AI.add("run_ai", bool_t, 0, "Selecting will allow HL and Navigator to run, unselecting will stop new decisions from being made, but the robots will finish the last commands they were given. DO NOT USE in place of the e-stop.", True, None, None, edit_method="")
AI.add("override_ai_play", bool_t, 0, "Overrides the current play with the play specified by current_play parameter", False, None, None, edit_method="")
AI.add("current_ai_play", str_t, 0, "Specifies the ai play that should be in use", "Example Play", None, None, edit_method=ai_current_ai_play_enum)
refbox = AI.add_group("refbox")
refbox.add("override_refbox_play", bool_t, 0, "Overrides the current refbox play with the play specified by current_play parameter", False, None, None, edit_method="")
refbox.add("current_refbox_play", str_t, 0, "Specifies the refbox play that should be in use", "Halt", None, None, edit_method="")
refbox.add("override_refbox_defending_side", bool_t, 0, "Overrides the defending side provided by refbox,  with defending_positive_side parameter", True, None, None, edit_method="")
refbox.add("defending_positive_side", bool_t, 0, "Positive if selected, Negative if unselected", True, None, None, edit_method="")
refbox.add("override_refbox_friendly_team_color", bool_t, 0, "Overrides the team color provided by refbox,  with friendly_color_yellow parameter", True, None, None, edit_method="")
refbox.add("friendly_color_yellow", bool_t, 0, "Yellow if selected, Blue if unselected", True, None, None, edit_method="")
refbox.add("friendly_goalie_id", int_t, 0, "The id of the friendly goalie", 0, 0, 16, edit_method="")
refbox.add("enemy_goalie_id", int_t, 0, "The id of the enemy goalie", 0, 0, 16, edit_method="")
refbox.add("ignore_invalid_camera_data", bool_t, 0, "Whether or not to ignore invalid camera data. If this value is true, any ball or robot detections that are not within the min and max valid x coordinates will be ignored. If this value is false, all data is collected as normal and not ignored.", False, None, None, edit_method="")
refbox.add("min_valid_x", double_t, 0, "When ignore_invalid_camera_data is true, any robot or ball detection with an x-coordinate less than this value is ignored.", -10.0, -10.0, 10.0, edit_method="")
refbox.add("max_valid_x", double_t, 0, "When ignore_invalid_camera_data is true, any robot or ball detection with an x-coordinate greater than this value is ignored.", 10.0, -10.0, 10.0, edit_method="")
exit(gen.generate("param_server", "ps", "ai_control"))