#!/usr/bin/env python
from dynamic_reconfigure.parameter_generator_catkin import *
gen = ParameterGenerator()
NetworkInput = gen.add_group("NetworkInput")
Filter = NetworkInput.add_group("Filter")
ParticleFilter = Filter.add_group("ParticleFilter")
ParticleFilter.add("num_condensations", int_t, 0, "The number of condensations for the particle filter", 5, 1, 50, edit_method="")
ParticleFilter.add("top_percentage_of_particles", double_t, 0, "The top fraction of particles that are used as basepoints for the next ", 0.1, 0, 1, edit_method="")
ParticleFilter.add("max_detection_weight", double_t, 0, "The weight of vision detections", 100, 0, 1000, edit_method="")
ParticleFilter.add("detection_weight_decay", double_t, 0, "The decay rate (per meter) of the detection weight", 200, 0, 10000, edit_method="")
ParticleFilter.add("previous_ball_weight", double_t, 0, "The weight of the previous ball's position", 1, 0, 1000, edit_method="")
ParticleFilter.add("prediction_weight", double_t, 0, "The weight of the previous ball's predicted position", 15, 0, 1000, edit_method="")
ParticleFilter.add("ball_dist_threshold", double_t, 0, "How close a particle must be to the ball to get the extra", 0.5, 0, 100, edit_method="")
ParticleFilter.add("ball_confidence_threshold", double_t, 0, "The confidence threshold for being confident or not of the ball's", 60, 0, 100, edit_method="")
ParticleFilter.add("ball_valid_dist_threshold", double_t, 0, "How much the detected ball can move per tick without losing confidence", 0.1, 0, 100, edit_method="")
ParticleFilter.add("ball_confidence_delta", double_t, 0, "How much the ball's confidence changes at a time", 5, 0, 100, edit_method="")
ParticleFilter.add("ball_max_variance", double_t, 0, "The max variance a ball detection can have without losing confidence", 1, 0, 10, edit_method="")
exit(gen.generate("param_server", "ps", "particle_filter"))